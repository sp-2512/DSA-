#include <iostream>
#include <vector>
#include <map>
#include <string>
using namespace std;

map<string, vector<string>> adj;
map<string, bool> visited;

void dfs(string city) {
    visited[city] = true;
    for (string neighbor : adj[city]) {
        if (!visited[neighbor])
            dfs(neighbor);
    }
}
int main() {
    int flights;
    cout << "Enter number of flight connections: ";
    cin >> flights;
    cout << "\nEnter each flight as: source destination\n";
    for (int i = 0; i < flights; i++) {
        string a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a); // Undirected
        visited[a] = false;
        visited[b] = false;
    }
    // Start DFS from the first city
    if (!visited.empty())
        dfs(visited.begin()->first);
    // Check if all cities were visited
    bool connected = true;
    for (auto& pair : visited) {
        if (!pair.second) {
            connected = false;
            break;
        }
    }
    cout << "\nFlight connections:\n";
    
    for (auto& pair : adj) {
        cout << pair.first << " -> ";
        for (string dest : pair.second)
            cout << dest << " ";
        cout << endl;
    }
    if (connected)
        cout << "\nThe graph is connected.\n";
    else
        cout << "\nThe graph is NOT connected.\n";
    return 0;
}